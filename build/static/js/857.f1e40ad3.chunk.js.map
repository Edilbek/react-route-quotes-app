{"version":3,"file":"static/js/857.f1e40ad3.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__9cxIN\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__C3cQf\",\"loading\":\"NewCommentForm_loading__aSq20\",\"control\":\"NewCommentForm_control__iR6jS\",\"actions\":\"NewCommentForm_actions__NC323\"};","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = ({ onAddedComment, quoteId }) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n  \n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n  \n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    sendRequest({ commentData: { text: enteredText }, quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__+vwzS\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__UVWAR\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const params = useParams();\n  const quoteId = params.quoteId;\n\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const onAddedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  if (status === 'completed' && (loadedComments && loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className='centered'>No comments were added yet!</p>\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={onAddedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__dE8qA\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = ({ text, author }) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{text}</p>\n      <figcaption>{author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { Fragment, useEffect } from 'react'\nimport { Route, useParams, Link, useRouteMatch } from 'react-router-dom';\n\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\n\nconst QuoteDetail = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n\n  const { quoteId } = params;\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    return <div className='centered'>\n      <LoadingSpinner />\n    </div>\n  }\n\n  if (error) {\n    return <p className='centered'>{error}</p>\n  }\n  \n  if (!loadedQuote.text) {\n    return <p>No quote found!</p>\n  }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={`${match.path}`} exact>\n        <div className='centered'>\n          <Link className='btn--flat' to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`} component={Comments} />\n    </Fragment>\n  )\n}\n\nexport default QuoteDetail;"],"names":["onAddedComment","quoteId","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","className","classes","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","props","comments","map","comment","useParams","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","onAddedCommentHandler","useCallback","length","onClick","author","match","useRouteMatch","getSingleQuote","loadedQuote","Fragment","path","exact","to","url","component","Comments"],"sourceRoot":""}